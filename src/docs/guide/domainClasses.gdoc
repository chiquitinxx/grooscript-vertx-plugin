There are two tags for work with domain classes in the client side. At the moment only work in development, classes are
converted to javascript when tags are processed. Js files are generated in web-app/js/domain.js, web-app/js/remoteDomain.js,
web-app/js/domain/** and web-app/js/remoteDomain/**.

Let's take an example domain class in your grails domain directory:

{code}
package myPackage

class Book {
    String author
    String title
    int pages
}
//belongsTo, hasMany,... will be ignored. Will convert properties defined up and methods.
{code}

*First tag* (model) allow you work with domain class in the browser, but without synchronization with the server.

{code}
<grooscript:model domainClass="Book"/>
<grooscript:code>
    import myPackage.Book

    def book = new Book()
    book.title = 'Cien a√±os de soledad'
    book.save()

    println Book.list()
</grooscript:code>
{code}

Methods that you can use with this tag:

- validate, clientValidations * still in development, to validate constraints
- hasErrors
- count
- list * without params
- get
- save * without params
- delete

also, can add listeners when a save or delete is done. Listener closure has a map parameter [action:nameAction, item: item]
where nameAction is 'insert', 'update' or 'delete' and item is the domain class instance.

{code}
<grooscript:code>
    Book.changeListeners << { data -> println data }
</grooscript:code>
{code}

*Second tag* (remoteModel) allow you work with domain class in the browser, but getting or changing data in the server.

You have to define security, to access your domain classes from the browsers, in your Config.groovy. A list of maps,
each map is a domain class you want to access from outside. For each action, you can define a boolean or a closure, to
allow or not that action from javascript.

{code}
grooscript.model = [
        [name: 'DomainItem', create: true, read: true, update: true, delete: { -> true}, list: true]
]
{code}

{code}
<grooscript:remoteModel domainClass="myPackage.Book"/>

<grooscript:code>
    import myPackage.Book

    def book = new Book(title: 'Groovy in Action')
    book.save().then({
        $('#info').append('<p>Book saved ok!</p>')
        Plane.list().then({ data ->
            println 'List incoming '+data
        }, { data -> println 'Error in list' })
    }, { data -> println 'Error in save' })
</grooscript:code>
{code}

You can do the following actions: list, get, save, delete. All this actions with this remote domain classes returns a
class with this interface:

{code}
package org.grooscript.grails.plugin.promise

interface GsPromise {
    def then(Closure success, Closure fail)
}
{code}

As all actions are done in the server and are asynchronous, you have to define a closure to process success and a closure
to process fails, last one is optional. If all goes smooth, success gets a map with properties of the new domain instance
or a list of domain classes if you used list. If something failed, you get a list of fails.

*Still experimental, and only works with grails 2.3.x *