There are two event engines that can be running in your page. Vert.x and internal event listener. Vert.x is used for
communicate with the server, and the internal is used with templates or the model. You can listen events trigger, or
launch the events. Both, Vert.x and client event has same methods:

{code}
void sendMessage(String channel, Map data)
void onEvent(String channel, Closure action)
{code}

You can listen an event trigger with onEvent, on a channel. Closure receives a map with the data of the message.

You can launch an event on a channel with sendMessage.

h2. Vert.x Events, between server and pages.

You have bean @eventBus@ available in your grails artifacts

{code}
eventBus.onEvent('myChannel', { msg -> println "Message incoming: $msg"})

eventBus.sendMessage('myChannel', [message: 'hello world!'])
{code}

In your gsp's, you have js variable @grooscriptEventBus@, but better use tags. You can listen on messages from the
server, or when Vert.x client connection is done.

{code}
<grooscript:onVertxStarted>
    console.log 'Started!'
</grooscript:onVertxStarted>
<grooscript:onServerEvent name="testingIncoming">
    $('p').text('New message! ' + message)
</grooscript:onServerEvent>
{code}

You can launch events, in your groovy or js code, with:
{code}
GrooscriptGrails.sendServerMessage('testing', message)
{code}

h2. Client events, in your pages only.

When you listen to a client event, or a template is listening events, then client event is activated in the page.
You can listen an event with:

{code}
<grooscript:onEvent name='nameEvent'>
    console.log 'Message received:' + message
</grooscript:onEvent>
{code}

And launch client events with:

{code}
GrooscriptGrails.sendClientMessage('nameEvent', message)
{code}